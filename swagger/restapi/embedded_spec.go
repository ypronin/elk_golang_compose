// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "DATA TEAM API",
    "title": "DATA TEAM API",
    "version": "v1"
  },
  "host": "localhost:8000",
  "paths": {
    "/health/v1": {
      "get": {
        "produces": [
          "text/plain"
        ],
        "schemes": [
          "http"
        ],
        "responses": {
          "200": {
            "description": "Service Health",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Not Ok",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/json-schema.json": {
      "get": {
        "produces": [
          "text/plain"
        ],
        "schemes": [
          "http"
        ],
        "responses": {
          "200": {
            "description": "Poker Log Json Schema",
            "schema": {
              "$ref": "#/definitions/PokerTransaction"
            }
          },
          "500": {
            "description": "Not Ok",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Error": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "PokerTransaction": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "integer",
          "format": "int64"
        },
        "currencyID": {
          "type": "string"
        },
        "playable": {
          "type": "integer",
          "format": "int64"
        },
        "playableBefore": {
          "type": "integer",
          "format": "int64"
        },
        "playerID": {
          "type": "string"
        },
        "playerIP": {
          "type": "string"
        },
        "transactionID": {
          "type": "string"
        }
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "DATA TEAM API",
    "title": "DATA TEAM API",
    "version": "v1"
  },
  "host": "localhost:8000",
  "paths": {
    "/health/v1": {
      "get": {
        "produces": [
          "text/plain"
        ],
        "schemes": [
          "http"
        ],
        "responses": {
          "200": {
            "description": "Service Health",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Not Ok",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/json-schema.json": {
      "get": {
        "produces": [
          "text/plain"
        ],
        "schemes": [
          "http"
        ],
        "responses": {
          "200": {
            "description": "Poker Log Json Schema",
            "schema": {
              "$ref": "#/definitions/PokerTransaction"
            }
          },
          "500": {
            "description": "Not Ok",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Error": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "PokerTransaction": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "integer",
          "format": "int64"
        },
        "currencyID": {
          "type": "string"
        },
        "playable": {
          "type": "integer",
          "format": "int64"
        },
        "playableBefore": {
          "type": "integer",
          "format": "int64"
        },
        "playerID": {
          "type": "string"
        },
        "playerIP": {
          "type": "string"
        },
        "transactionID": {
          "type": "string"
        }
      }
    }
  }
}`))
}
